#include "../include/21_Reverse.h"
//题目：给出一个32位的有符号整数，你需要将这个整数中每位上的数字进行反转。
//思路：入参从个位开始取，把取到的数乘10累加，就是需要的结果
//		溢出问题：在每一次相加之前检查是否溢出
//				正溢出：当sum大于214748367/10,或者sum 等于 2147483647/10 && 取到的个位数pop大于7，则溢出
//				负溢出：当sum小于-214748368/10,或者sum 等于 -2147483648/10 && 取到的个位数pop小于-8，则溢出
int Reverse(int x) {
	int sum = 0;	//用来存放返回值
	int pop = 0;	//存放入参个位的数字
	while (x != 0) {	//对入参循环除10，直到除尽为止
		pop = x % 10;	//取到个位的数字
		x = x / 10;		//入参除10，为取下一个数做准备
		if ((sum > INT_MAX / 10) || (sum == INT_MAX/10 && pop > 7)) //正数溢出判断
			return 0;
		if ((sum < INT_MIN / 10) || (sum == INT_MIN/10 && pop < -8)) //负数溢出判断
			return 0;
		sum = sum * 10 + pop;	//把得到的个位数*10相加，得到的就是需要返回的数
	}
	return sum;
}